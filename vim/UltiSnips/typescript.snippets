# vim: set ts=8 sw=8 tw=80 ft=snippets noet :

snippet desc "describe()" w
describe("${1:Description:string}", () =>
	$0
});
endsnippet

snippet = "() => {}" i
($1) => {
	$0
}
endsnippet

snippet =: "() => {}" i
= ($1) => ${2:ReturnType}$0
endsnippet

snippet - "() => <T>" i
$1 => $2
endsnippet

snippet bef "beforeEach" b
beforeEach($1);
$0
endsnippet

snippet it "it(...)" w
it("${1:does something}", ($2) => {
	$3
});$0
endsnippet

snippet exp "expect(...)" w
expect(${1:object}).${2:toEqual}(${3:something});$0
endsnippet

snippet expn "expect(...).not" w
expect(${1:object}).not.${2:toEqual}(${3:something});$0
endsnippet

snippet if "if statement" w
if (${1:condition}) {
	$2
}$0
endsnippet

snippet el "else" w
else {
	$1
}$0
endsnippet

snippet let "let" w
let $1${2:: ${3:Type}};$0
endsnippet

snippet xp "export ..." b
export $0
endsnippet

snippet imp "import { } from ..." b
import { ${1:What} } from '${2:where}';$0
endsnippet

priority 1
snippet meth "class/object method" w
${1:methodName}(${2:args}): ${3:returnType} {
	$0
}
endsnippet

snippet nofmt "disable clang-format for a block" b
// clang-format off
$0
// clang-format on
endsnippet

snippet impl "implements ..." w
implements ${1:Interfaces...}$0
endsnippet

priority 1
snippet ctor "constructor" w
constructor($1) {
	$2
}$0
endsnippet

snippet elif "else if" w
else if (${1:condition}) {
	$0
}
endsnippet

priority 1
snippet exp "export" w
export $0
endsnippet

priority 1
snippet cla "class .." w
class ${1:`!v substitute(vim_snippets#Filename(), '\(-\|_\|\.\|^\)\(.\)', '\u\2', 'g')`}${2: extends ${3:ParentClass}} {
	${4:constructor(${5:args}) {
    ${6://code...}
  }}
}
endsnippet

snippet header "File Header" b
/**
 * `!v expand('%')`
 *${1:`!v substitute(vim_snippets#Filename(), '\(-\|_\|\.\|^\)\(.\)', ' \u\2', 'g')`}
 *
 */
endsnippet

snippet ns "namespace" w
namespace ${1:Name} {
	$0
}
endsnippet

snippet attr "attribute" w
${1:attribute}: ${2:Type};$0
endsnippet

snippet pub "public" w
public $0
endsnippet

snippet pro "protected" w
protected $0
endsnippet

snippet prot "protected" w
protected $0
endsnippet

snippet pri "private" w
private $0
endsnippet

snippet priv "private" w
private $0
endsnippet

snippet st "static" w
static $0
endsnippet

snippet wh "while loop" b
while (${1:condition}) {
	$0
}
endsnippet

snippet fori "for in" w
for (var ${1:varname} in ${2:object}) {
	$0
}
endsnippet

snippet iface "interface" w
interface ${1:Name} {
	$0
}
endsnippet

snippet sw "switch (...)" w
switch (${1:variable}) {
case ${2:variable_case}:
	$3
	${4:break;}$5
$6
default:
	$7
}$0
endsnippet

snippet case "case..." w
case ${1:variable_case}:
	$2
	${3:${4:break;}}
$0
endsnippet

snippet ng2-component "Angular 2 Component" b
import { Component, OnInit } from '@angular/core';

@Component({
	moduleId: module.id,
	selector: '${1:#:selector}',
	templateUrl: '${2:#:name}.component.html'
})
export class ${1:#:ComponentName}Component implements OnInit {
	constructor() { }

	ngOnInit() { }
	$0
}
endsnippet

snippet ng2-service "Angular 2 Service" b
import { Injectable } from '@angular/core';

@Injectable()
export class ${1:#:ServiceName}Service {
	$0
	constructor() { }
}
endsnippet

snippet ng2-pipe "Angular 2 Pipe" b
import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
	name: '${name}'
})

export class ${1:#:PipeName}Pipe implements PipeTransform {
transform(value: any, args: any[]): any {
	$0
}
}
endsnippet

snippet ng2-routes "Angular 2 Routes" b
@Routes([
	{ path: '/${1:#:path}', component: ${2:#:Component} }$0
])
endsnippet

snippet ng2-route-path "Angular 2 Route Path" b
{ path: '/${1:#:path}', component: ${2:#:Component} }$0
endsnippet

snippet ng2-http-get "Angular 2 HTTP Get" b
return this.http.get('${1:#:url}')
	.map((res: Response) => res.json()$0);
endsnippet

snippet ng2-subscribe "Angular 2 Subscribe" b
this.${1:#:service}.${2:#:function}
	.subscribe(${3:#:arg} => this.${4:#:property} = ${5:#:arg});
$0
endsnippet

snippet ng2-bootstrap "Angular 2 Bootstrap App" b
import { enableProdMode } from '@angular/core';
import { bootstrap } from '@angular/platform-browser-dynamic';

import { ${1:#:AppComponent} } from './${2:#:name}.component';

// enableProdMode();

bootstrap(${3:#:AppComponent})
	.then(success => console.log('Bootstrap success'))
	.catch(error => console.log(error));
${0}

endsnippet

snippet ng2-component-root "Angular 2 Root Component" b
import { Component } from '@angular/core';
import { HTTP_PROVIDERS } from '@angular/http';
import { Routes, ROUTER_DIRECTIVES, ROUTER_PROVIDERS } from '@angular/router';
import 'rxjs/Rx'; // load the full rxjs

@Component({
	moduleId: module.id,
	selector: '${1:#:selector}',
	templateUrl: '${2:#:name}.component.html',
	directives: [ROUTER_DIRECTIVES],
	providers: [
		HTTP_PROVIDERS,
		ROUTER_PROVIDERS
	]
})
@Routes([
	$0
])
export class AppComponent {}
endsnippet
