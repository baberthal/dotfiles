# vim: set ts=8 sw=8 tw=80 ft=snippets noet :

global !p
from javascript_snippets import (
	semi, space_before_function_paren, keyword_spacing
)
from helpers.file_header import FileHeader
import tshelpers

def MakeFileHeader(snip, t, width, pad=True, filename=None):
    header = FileHeader(snip, suffix="---===//", filename=filename)
    return header.render(t, width=width, pad=pad)

endglobal

snippet ///p "import reference (path)" b
/// <reference path="${1: file}" />
$0
endsnippet

snippet /// "import reference (types)" b
/// <reference types="${1:types}" />
endsnippet

snippet desc "describe()" w
describe("${1:description}", () => {
	$0
});
endsnippet

snippet descm "describe(#method)" w
describe("#${1:method}", () => {
	$0
});
endsnippet

snippet = "() => {}" i
($1) => {
	$0
}
endsnippet

snippet a= "async () => {}" i
async ($1) => {
	$2
}$0
endsnippet

snippet =: "() => {}" i
= ($1) => ${2:ReturnType}$0
endsnippet

snippet - "() => <T>" i
$1 => $2
endsnippet

snippet if "if statement" w
if (${1:condition}) {
	$2
}$0
endsnippet

snippet el "else" w
else {
	$1
}$0
endsnippet

snippet let "let" w
let $1${2:: ${3:Type}};$0
endsnippet

snippet xp "export ..." b
export $0
endsnippet

snippet expd "export default ..." b
export default $0
endsnippet

snippet imp "import { } from ..." b
import { ${1:What} } from "${2:where}";$0
endsnippet

snippet imp* "import * as ... from ..." b
import * as ${1:name} from "${2:$1}";$0
endsnippet

snippet impd "import Whatever from ..." b
import ${1:What} from "${2:where}";$0
endsnippet

priority 1
snippet meth "class/object method" w
${1:methodName}(${2:args}): ${3:returnType} {
	$0
}
endsnippet

snippet nofmt "disable clang-format for a block" b
// clang-format off
$0
// clang-format on
endsnippet

snippet impl "implements ..." w
implements ${1:Interfaces...}$0
endsnippet

priority 1
snippet ctor "constructor" w
constructor($1) {
	$2
}$0
endsnippet

snippet elif "else if" w
else if (${1:condition}) {
	$0
}
endsnippet

priority 1
snippet exp "export" w
export $0
endsnippet

priority 1
snippet cla "class .." w
class ${1:`!v substitute(vim_snippets#Filename(), '\(-\|_\|\.\|^\)\(.\)', '\u\2', 'g')`}${2: extends ${3:ParentClass}} {
	${4:constructor(${5:args}) {
    ${6://code...}
  }}
}
endsnippet

snippet header "File Header" b
/**
 * `!v expand('%')`
 *${1:`!v substitute(vim_snippets#Filename(), '\(-\|_\|\.\|^\)\(.\)', ' \u\2', 'g')`}
 *
 */
endsnippet

snippet ns "namespace" w
namespace ${1:Name} {
	$0
}
endsnippet

snippet attr "attribute" w
${1:attribute}: ${2:Type};$0
endsnippet

snippet ro "readonly" w
readonly $0
endsnippet

snippet pub "public" w
public $0
endsnippet

snippet pro "protected" w
protected $0
endsnippet

snippet prot "protected" w
protected $0
endsnippet

snippet pri "private" w
private $0
endsnippet

snippet priv "private" w
private $0
endsnippet

snippet st "static" w
static $0
endsnippet

snippet abs "abstract" w
abstract $0
endsnippet

snippet wh "while loop" b
while (${1:condition}) {
	$0
}
endsnippet

snippet fori "for in" w
for (${1:const} ${2:varname} in ${3:object}) {
	$0
}
endsnippet

snippet iface "interface" w
interface ${1:Name} {
	$0
}
endsnippet

snippet sw "switch (...)" w
switch (${1:variable}) {
case ${2:variable_case}:
	$3
	${4:break;}$5
$6
default:
	$7
}$0
endsnippet

snippet case "case..." w
case ${1:variable_case}:
	$2
	${3:${4:break;}}
$0
endsnippet

snippet for "for loop" b
for (let ${1:i} = 0; $1 < ${2:length}; $1++) {
	$0
}
endsnippet

snippet //ts "disable tslint rule" w
/* tslint:${1:disable}:${2:rule1$3} */$0
endsnippet

snippet //tsl "disable tslint next-line" b
/* tslint:disable-next-line${1::rule1$2} */$0
endsnippet

snippet fhead "File Header" b
`!p
if not snip.c:
    width = int(vim.eval("&textwidth")) or 80

header = MakeFileHeader(snip, t, width)
snip.rv = header[0]
`${1:${VISUAL:Brief Description}}`!p
snip.rv = header[1]
`
//
// Copyright (c) `date +%Y` J. Morgan Lieberthal
// Licensed under the MIT License
//
//===-----------------------------------------------------------------------===//
${2:///
/// $3
///
//===-----------------------------------------------------------------------===//}
$0
endsnippet

snippet section "section" b
//===-----------------------------------------------------------------------===//
//   ${1:name}
//===-----------------------------------------------------------------------===//
$0
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(`!p snip.rv = space_before_function_paren(snip)`(${1:window}) => {
	${VISUAL}$0
})(${2:$1})`!p snip.rv = semi(snip)`
endsnippet

snippet psf "public static function" b
public static ${1:function_name}(${2:args}) {
	$0
}
endsnippet

snippet get "Property getter" w
get ${1:property}(): ${2:Type} {
	$0
}
endsnippet

################################################################################
#                              Skeleton Snippets                               #
################################################################################

snippet _skel "Default Skeleton" b
`!p
if not snip.c:
    width = int(vim.eval("&textwidth")) or 80

header = MakeFileHeader(snip, t, width)
snip.rv = header[0]
`${1:${VISUAL:Brief Description}}`!p
snip.rv = header[1]
`
//
// Copyright (c) `date +%Y` J. Morgan Lieberthal
// Licensed under the MIT License
//
//===-----------------------------------------------------------------------===//
${2:///
/// $3
///
//===-----------------------------------------------------------------------===//}
$0
endsnippet

snippet _class "Class File Skeleton" b
`!p
if not snip.c:
    width = int(vim.eval("&textwidth")) or 80

header = MakeFileHeader(snip, t, width)
snip.rv = header[0]
`${1:${VISUAL:Brief Description}}`!p
snip.rv = header[1]
`
//
// Copyright (c) `date +%Y` J. Morgan Lieberthal
// Licensed under the MIT License
//
//===-----------------------------------------------------------------------===//
${2:///
/// $3
///
//===-----------------------------------------------------------------------===//}

export class ${4:`!p snip.rv = tshelpers.Classify(snip.basename)`}${5: extends ${6:ParentClass}} {
	${7:constructor(${8:args}) {
    ${9://code...}$0
  }}
}
endsnippet

snippet _func "Function File Skeleton" b
`!p
if not snip.c:
    width = int(vim.eval("&textwidth")) or 80

header = MakeFileHeader(snip, t, width)
snip.rv = header[0]
`${1:${VISUAL:Brief Description}}`!p
snip.rv = header[1]
`
//
// Copyright (c) `date +%Y` J. Morgan Lieberthal
// Licensed under the MIT License
//
//===-----------------------------------------------------------------------===//
${2:///
/// $3
///
//===-----------------------------------------------------------------------===//}

export function ${4:`!p snip.rv = tshelpers.Functionify(snip.basename)`}(${5:argument}) {
	${VISUAL}$0
}

export default $4;
endsnippet

snippet _component "Component Skeleton" b
`!p
if not snip.c:
    width = int(vim.eval("&textwidth")) or 80

name = snip.basename.replace(".component", "")
header = MakeFileHeader(snip, t, width, filename=snip.basename)
snip.rv = header[0]
`${1:${VISUAL:Brief Description}}`!p
snip.rv = header[1]
`
//
// Copyright (c) `date +%Y` J. Morgan Lieberthal
// Licensed under the MIT License
//
//===-----------------------------------------------------------------------===//

import { Component, Vue } from "@app/core";

import template from "./${2:`!p snip.rv = name`}.template.html";

@Component({
	template
})
export class ${3:`!p snip.rv = tshelpers.Classify(name)`} extends Vue {
	${4}
}

export default $3;
endsnippet
