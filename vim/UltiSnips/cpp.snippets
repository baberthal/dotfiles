# We want to override the parent snippets, so we do this:
priority -10
extends c

priority 0

global !p
from cxx_snippets import *
endglobal

snippet tdb "typedef block" b
typedef ${1:return_type}(^${2:block_name})(${3:block_params});$0
endsnippet

snippet tdf "typedef function pointer" b
typedef ${1:return_type}(*${2:type_name})(${3:func_params});$0
endsnippet

snippet ns "namespace" b
namespace ${1:`!p snip.rv = GetProjectNamespace()`} {
${VISUAL}$0
} // namespace $1
endsnippet

snippet headerguard "Header boilerplace" b
#ifndef ${1:`!p
filename = vim.eval("expand('%')")
snip.rv = MakeHeaderGuardIdentifier(filename)`}_H
#define $1_H

$0

#endif /* ifndef $1_H */
endsnippet

snippet tmpl "template <type...>" b
template <${1:typename $2}> $0
endsnippet

snippet line "test line" b
`!p
if not snip.c:
    width = int(vim.eval("&textwidth")) or 80
filename = vim.eval("expand('%')")
header = MakeFileHeader(filename, len(t[1]), width)
snip.rv = header[0]
`${1:${VISUAL:Brief Description}}`!p
header = MakeFileHeader(filename, len(t[1]), width)
snip.rv = header[1]
`
endsnippet

snippet clf "Class Forward Declaration" b
class ${1:Name};$0
endsnippet
##
## Preprocessor
# #include <...>

##################
#  Input/Output  #
##################

snippet cout "std::cout << $1 << std::endl" b
std::cout << $1 << std::endl;$0
endsnippet

snippet cerr "std::cerr << $2 << std::endl" b
std::cerr << $1 << std::endl;$0
endsnippet

snippet cin "std::cin >> $1;" b
std::cin >> $1;$0
endsnippet

###########
#  Casts  #
###########

snippet sca "static_cast<>" w
static_cast<${1:Type}>(${2:expr})$0
endsnippet

snippet dca "dynamic_cast<>" w
dynamic_cast<${1:Type}>(${2:expr})$0
endsnippet

snippet rca "reinterpret_cast<>" w
reinterpret_cast<${1:Type}>(${2:expr})$0
endsnippet

snippet cca "const_cast<>" w
const_cast<${1:Type}>(${2:expr})$0
endsnippet

###################
#  Documentation  #
###################

snippet doc "Doxygen Documentation Block" b
/// \brief $0
endsnippet

snippet doxblock "doxygen block" b
/// @name ${1:name}
/// @{

${0:${VISUAL}}

/// @}
endsnippet


#####################
#  Data Structures  #
#####################

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
	${1/(\w+).*/$1/}(${2:arguments});
	virtual ~${1/(\w+).*/$1/}();

private:
	${0:/* data */}
};
endsnippet

snippet ctor "constructor definition" b
${1:`!p snip.rv = snip.basename or "name"`}(${2:arguments}) ${3:: $4 {$5}}$0
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>$0
endsnippet

snippet exp "explicit ..." b
explicit $0
endsnippet
