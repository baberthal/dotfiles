# We want to override the parent snippets, so we do this:
priority -20
extends c

priority 10

global !p
from cxx_snippets import *
endglobal

snippet tdb "typedef block" b
typedef ${1:return_type}(^${2:block_name})(${3:block_params});$0
endsnippet

snippet tdf "typedef function pointer" b
typedef ${1:return_type}(*${2:type_name})(${3:func_params});$0
endsnippet

snippet ns "namespace" b
namespace ${1:`!p snip.rv = GetProjectNamespace()`} {
${VISUAL}$0
} // end namespace $1
endsnippet

snippet ans "anonymous namespace" b
namespace {
${VISUAL}$0
} // end anonymous namespace
endsnippet

snippet headerguard "Header boilerplace" b
#ifndef ${1:`!p snip.rv = HeaderGuard()`}
#define $1

$0

#endif /* ifndef $1 */
endsnippet

snippet tmpl "template <type...>" b
template <${1:typename $2}> $0
endsnippet

snippet clf "Class Forward Declaration" b
class ${1:Name};$0
endsnippet
##
## Preprocessor
# #include <...>

##################
#  Input/Output  #
##################

snippet cout "std::cout << $1 << std::endl" b
std::cout << $1 << std::endl;$0
endsnippet

snippet cerr "std::cerr << $2 << std::endl" b
std::cerr << $1 << std::endl;$0
endsnippet

snippet cin "std::cin >> $1;" b
std::cin >> $1;$0
endsnippet

###########
#  Casts  #
###########

snippet sca "static_cast<>" w
static_cast<${1:Type}>(${2:expr})$0
endsnippet

snippet dca "dynamic_cast<>" w
dynamic_cast<${1:Type}>(${2:expr})$0
endsnippet

snippet rca "reinterpret_cast<>" w
reinterpret_cast<${1:Type}>(${2:expr})$0
endsnippet

snippet cca "const_cast<>" w
const_cast<${1:Type}>(${2:expr})$0
endsnippet

###################
#  Documentation  #
###################

snippet doc "Doxygen Documentation Block" b
/// \brief $0
endsnippet

snippet doxblock "doxygen block" b
/// @name ${1:name}
/// @{

${0:${VISUAL}}

/// @}
endsnippet


#####################
#  Data Structures  #
#####################

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
	${1/(\w+).*/$1/}(${2:arguments});
	virtual ~${1/(\w+).*/$1/}();

private:
	${0:/* data */}
};
endsnippet

snippet ctor "constructor definition" b
${1:`!p snip.rv = snip.basename or "name"`}(${2:arguments}) ${3:: $4 {$5}}$0
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>$0
endsnippet

snippet exp "explicit ..." b
explicit $0
endsnippet

snippet _testskel "Test skeleton" b
`!p
if not snip.c:
    width = int(vim.eval("&textwidth")) or 80

header = MakeFileHeader(snip, t, width, pad=False)
snip.rv = ''.join(header)
`
//
// This source file is part of the ${1:`!p snip.rv = GetProjectName()`} open source project.
//
// Copyright (c) `date +%Y` J. Morgan Lieberthal and the $1 authors
// Licensed under Apache License, Version 2.0
//
//===----------------------------------------------------------------------===//

#include "gtest/gtest.h"

$0
endsnippet

snippet test "gtest test" b
TEST(${1:`!p snip.rv = snip.basename or "name"`}, ${2:TestName}) {
	$0
}
endsnippet

snippet etrue "EXPECT_TRUE" b
EXPECT_TRUE(${1:expr});$0
endsnippet

snippet efalse "EXPECT_FALSE" b
EXPECT_FALSE(${1:expr});$0
endsnippet

snippet eeq "EXPECT_EQ" b
EXPECT_EQ(${1:expr}, ${2:expr});$0
endsnippet

snippet ene "EXPECT_NE" b
EXPECT_NE(${1:expr}, ${2:expr});$0
endsnippet

snippet elt "EXPECT_LT" b
EXPECT_LT(${1:expr}, ${2:expr});$0
endsnippet

snippet ele "EXPECT_LE" b
EXPECT_LE(${1:expr}, ${2:expr});$0
endsnippet

snippet egt "EXPECT_GT" b
EXPECT_GT(${1:expr}, ${2:expr});$0
endsnippet

snippet ege "EXPECT_GE" b
EXPECT_GE(${1:expr}, ${2:expr});$0
endsnippet

snippet atrue "ASSERT_TRUE" b
ASSERT_TRUE(${1:expr});$0
endsnippet

snippet afalse "ASSERT_FALSE" b
ASSERT_FALSE(${1:expr});$0
endsnippet

snippet aeq "ASSERT_EQ" b
ASSERT_EQ(${1:expr}, ${2:expr});$0
endsnippet

snippet ane "ASSERT_NE" b
ASSERT_NE(${1:expr}, ${2:expr});$0
endsnippet

snippet alt "ASSERT_LT" b
ASSERT_LT(${1:expr}, ${2:expr});$0
endsnippet

snippet ale "ASSERT_LE" b
ASSERT_LE(${1:expr}, ${2:expr});$0
endsnippet

snippet agt "ASSERT_GT" b
ASSERT_GT(${1:expr}, ${2:expr});$0
endsnippet

snippet age "ASSERT_GE" b
ASSERT_GE(${1:expr}, ${2:expr});$0
endsnippet

snippet sta "static" b
static $0
endsnippet

snippet ce "constexpr" w
constexpr $0
endsnippet
