# Global ycm_extra_conf file.
#

import os
import ycm_core
import logging

#  Base Flag Constants {{{ #

BASE_WARNING_FLAGS = [
    # 'Hard mode'
    '-Wall',
    '-Wextra',

    # Some others that aren't included in the above.
    '-Wbool-conversion',
    '-Wconstant-conversion',
    '-Wdeprecated-declarations',
    '-Wdocumentation',
    '-Wempty-body',
    '-Wenum-conversion',
    '-Wimplicit-fallthrough',
    '-Wint-conversion',
    '-Winvalid-offsetof',
    '-Wnewline-eof',
    '-Wnon-virtual-dtor',
    '-Wsign-compare',
    '-Wunreachable-code',

    # Disable the most pedantic (like gnu extensions, etc.)
    '-Wno-gnu-zero-variadic-macro-arguments',
    '-Wno-variadic-macros',
]

# To get this list, run the following command, and copy-paste the lines under
# the `#include <...> search starts here:` heading:
#
#     echo | clang -v -E -x c++ -
#
# Note you will have to prepend `-isystem` to each include path. Paths that
# end with `(framework directory)` should be prepended with `-F`.
XCTOOLCHAIN_PATH = ('/Applications/Xcode.app/Contents/Developer' +
                    '/Toolchains/XcodeDefault.xctoolchain')

BASE_INCLUDE_FLAGS = [
    '-isystem',
    '{0}/usr/include/c++/v1'.format(XCTOOLCHAIN_PATH),
    '-isystem',
    '/usr/local/include',
    '-isystem',
    '{0}/usr/lib/clang/9.0.0/include'.format(XCTOOLCHAIN_PATH),
    '-isystem',
    '{0}/usr/include'.format(XCTOOLCHAIN_PATH),
    '-isystem',
    '/usr/include',
    # '/System/Library/Frameworks' (framework directory)
    # '/Library/Frameworks' (framework directory)
]

BASE_FLAGS = BASE_INCLUDE_FLAGS + BASE_WARNING_FLAGS

SOURCE_EXTENSIONS = [
    '.cpp',
    '.cxx',
    '.cc',
    '.c',
    '.m',
    '.mm',
]

HEADER_EXTENSIONS = [
    '.h',
    '.hxx',
    '.hpp',
    '.hh',
    '',  # empty for standard library headers
]

SOURCE_DIRECTORIES = ['src', 'lib']

HEADER_DIRECTORIES = ['include']

#  }}} Base Flag Constants #


# FlagsForFile - Where the magic happens.
def FlagsForFile(filename):
    root = os.path.realpath(filename)
    compilation_db_flags = FlagsForCompilationDatabase(root, filename)
    if compilation_db_flags:
        final_flags = compilation_db_flags
    else:
        final_flags = BuildGenericFlagsForFile(filename)
        include_flags = FlagsForInclude(root)
        if include_flags:
            final_flags += include_flags
    return {'flags': final_flags, 'do_cache': True}


#  File Predicate Methods {{{ #


def isHeaderFile(filename):
    ext = os.path.splitext(filename)[1]
    return ext in HEADER_EXTENSIONS


def isCXXFile(filename):
    ext = os.path.splitext(filename)[1]
    return ext in ['.cpp', '.cxx', '.cc']


def isObjCFile(filename):
    return os.path.splitext(filename)[1] == '.m'


def isObjCXXFile(filename):
    return os.path.splitext(filename)[1] == '.mm'


#  }}} File Predicate Methods #

#  CompilationDatabase Query Functions {{{ #


def GetCompilationInfoForFile(database, filename):
    # The compilation_commands.json file generated by CMake does not have
    # entries for header files. So we do our best by asking the db for flags
    # for a corresponding source file, if any. If one exists, the flags for
    # that file should be good enough.
    if isHeaderFile(filename):
        return GetFlagsForHeaderFile(database, filename)
    return database.GetCompilationInfoForFile(filename)


def FlagsForCompilationDatabase(root, filename):
    try:
        compdb_path = FindNearest(root, 'compile_commands.json', 'build')
        compdb_dir = os.path.dirname(compdb_path)
        logging.info(
            "Setting compilation database directory to {0}".format(compdb_dir))
        compilation_db = ycm_core.CompilationDatabase(compdb_dir)
        if not compilation_db:
            logging.info(
                "Compilation database file found, but was unable to load")
            return None
        compilation_info = GetCompilationInfoForFile(compilation_db, filename)
        if not compilation_info:
            logging.info(
                "No compilation info for {!r} in compilation database: {!r}".
                format(filename, compdb_path))
            return None
        return MakeRelativePathsInFlagsAbsolute(
            compilation_info.compiler_flags_,
            compilation_info.working_directory_)
    except Exception:
        return None


#  }}} CompilationDatabase Query Functions #

#  Generic Flags {{{ #


def BuildGenericFlagsForFile(filename):
    """
    :type filename: str
    :returns: list[str]
    """
    head_flags = []
    tail_flags = []
    if isHeaderFile(filename) or isCXXFile(filename):
        head_flags = ['-x', 'c++']
        tail_flags = ['-std=c++14']
    elif isObjCFile(filename):
        head_flags = ['-ObjC']
    elif isObjCXXFile(filename):
        head_flags = ['-ObjC++']
    else:
        head_flags = ['-x', 'c']
        tail_flags = ['-std=gnu11']

    return head_flags + BASE_FLAGS + tail_flags


#  }}} Generic Flags #

#  Flags for Header Files {{{ #


def GetFlagsForHeaderFile(database, filename):
    basename = os.path.splitext(filename)[0]
    for extension in SOURCE_EXTENSIONS:
        replacement_file = basename + extension
        # Get the info from source files by replacing the extension
        compilation_info = GetFlagsForHeaderFromReplacementFile(
            database, replacement_file) or GetFlagsForHeaderFromSourceDir(
                database, replacement_file)

        if compilation_info is not None:
            return compilation_info


def GetFlagsForHeaderFromReplacementFile(database, replacement):
    if os.path.exists(replacement):
        compilation_info = database.GetCompilationInfoForFile(replacement)
        if compilation_info.compiler_flags_:
            return compilation_info
    return None


def GetFlagsForHeaderFromSourceDir(database, replacement):
    for header_dir in HEADER_DIRECTORIES:
        for source_dir in SOURCE_DIRECTORIES:
            src_file = replacement.replace(header_dir, source_dir)
            if os.path.exists(src_file):
                compilation_info = database.GetCompilationInfoForFile(src_file)
                if compilation_info.compiler_flags_:
                    return compilation_info
    return None


#  }}} Flags for Header Files #

#  General Helper Functions {{{ #


def FindNearest(path, target, build_folder=''):
    """
    :type path: str
    :type target: str
    :type build_folder: str
    :returns: str or None
    """
    candidate = os.path.join(path, target)
    if os.path.isfile(candidate) or os.path.isdir(candidate):
        logging.info("Found nearest {0} at {1}".format(target, candidate))
        return candidate

    parent = os.path.dirname(os.path.abspath(path))
    if parent == path:
        raise RuntimeError("Could not find {0}".format(target))
    if build_folder:
        candidate = os.path.join(parent, build_folder, target)
        if os.path.isfile(candidate) or os.path.isdir(candidate):
            logging.info("Found nearest {0} at {1}".format(target, candidate))
            return candidate
    return FindNearest(parent, target, build_folder=build_folder)


def MakeRelativePathsInFlagsAbsolute(flags, working_directory):
    if not working_directory:
        return list(flags)

    new_flags = []
    make_next_absolute = False
    path_flags = ['-isystem', '-I', '-iquote', '--sysroot=']

    for flag in flags:
        new_flag = flag

        if make_next_absolute:
            make_next_absolute = False
            if not flag.startswith('/'):
                new_flag = os.path.join(working_directory, flag)

        for path_flag in path_flags:
            if flag == path_flag:
                make_next_absolute = True
                break

            if flag.startswith(path_flag):
                path = flag[len(path_flag):]
                new_flag = path_flag + os.path.join(working_directory, path)
                break

        if new_flag:
            new_flags.append(new_flag)

    return new_flags


def FlagsForInclude(root):
    try:
        include_path = FindNearest(root, 'include')
        flags = []
        for dirroot, dirnames, filenames in os.walk(include_path):
            for dir_path in dirnames:
                real_path = os.path.join(dirroot, dir_path)
                flags += ['-I{0}'.format(real_path)]
        return flags
    except Exception:
        return None


#  }}} General Helper Functions #
