# Default Shell & Command
set -g default-shell $SHELL
# set -g default-command "/usr/local/bin/reattach-to-user-namespace -l ${SHELL}"

### LOOK & FEEL ###
set -g default-terminal "tmux-256color"

## neovim compat
set-option -sg escape-time 10
set-option -g focus-events on
set-option -sa terminal-overrides ',alacritty:RGB'

# Status bar
#setw -g automatic-rename off
#set -g set-titles on
#set -g set-titles-string '#S:#I.#P #W'
set -g status-left-length 52
set -g status-right-length 100
set -g status-fg white
set -g status-bg colour0
set -g window-status-activity-style bold
set -g pane-border-style fg=colour245
set -g pane-active-border-style fg=colour37
set -g message-style fg=colour16,bg=colour221,bold
# set -g message-attr bold
set -g status-left "#[fg=colour0,bg=colour37] \uf754  #[bold]#S #[fg=colour37,bg=colour11,nobold]#[fg=colour15,bg=colour11] #(whoami)@#h #[fg=colour11,bg=colour0,nobold]"
set -g window-status-format "#[fg=colour10,bg=colour0] #I #{=5:window_name}"
set -g window-status-current-format "#[fg=colour0,bg=colour33]#[fg=#ffffff,bg=colour33,noreverse,bold] #I #[fg=#62ade3,nodim] #[fg=#ffffff,nobold]#W #[fg=colour33,bg=colour0,nobold] "
set -g status-right "#[fg=colour37,bg=colour0,nobold]#[fg=colour0,bg=colour37,nobold,nounderscore,noitalics] %H:%M:%S #[nobold,nounderscore,noitalics,fg=colour13,bg=colour37]#[fg=colour15,bg=colour13,nobold] %d-%b-%y "
set-window-option -g automatic-rename on
set -g status-interval 1

# Pane border status, with RVM info
set -g pane-border-status off

# mouse mode & various options
set -g -q mouse on

# vim copy mode
set-option -g status-keys vi
set-option -g mode-keys vi
setw -g mode-keys vi
bind ` copy-mode
unbind [
unbind l
unbind p
unbind Escape
bind-key p paste-buffer
bind-key -n PPage if-shell -F "#{alternate_on}" "send-keys PPage" "copy-mode -e; send-keys PPage"
bind-key -n WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -n WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"
bind-key -T copy-mode-vi WheelUpPane send -X halfpage-up
bind-key -T copy-mode-vi WheelDownPane send -X halfpage-down
bind-key -T copy-mode-vi C-WheelUpPane send -X scroll-up
bind-key -T copy-mode-vi C-WheelDownPane send -X scroll-down
bind-key -T copy-mode-vi C-v send -X rectangle-toggle
bind-key -T copy-mode-vi Escape send -X cancel
bind-key -T copy-mode-vi PPage send -X page-up
bind-key -T copy-mode-vi NPage send -X page-down

bind-key -T copy-mode-vi 'v' send -X begin-selection
# bind-key -T copy-mode-vi 'y' send -X copy-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -sel clip"
# bind-key y run "tmux save-buffer - | pbcopy"
# bind-key C-c run "tmux save-buffer - | reattach-to-user-namespace pbcopy"
bind-key C-p run "tmux set-buffer \"$(xclip -sel clip -o)\"; tmux paste-buffer"

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

# Preserve <prefix><C-l> for clearing the screen
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l
bind-key C-l send-keys 'C-l'

# control-t opens a new window, but only if we aren't in a vim session
# (because it conficts with <c-t> to jump back up the tag stack)
bind-key -n C-t if-shell "$is_vim" "send-keys C-t" "new-window"
# and prefix C-t sends C-t
bind-key C-t "send-keys C-t"

# Rebind various keys
unbind-key C-b
set -g prefix C-a
bind-key a send-prefix

bind-key | split-window -h
bind-key - split-window -v

bind-key -n M-] next-window
bind-key -n M-[ previous-window
bind-key ] next-window
bind-key [ previous-window

bind-key R source-file ~/.tmux.conf \; display "Configuration Reloaded!"

set -g history-limit 1000000000

# Create a default session to use everywhere
new-session -d -s default
set-option -t default destroy-unattached off
